{-# START_FILE .gitattributes ) #-}
# Set line endings to auto.
* text=auto

# Force batch scripts to always use CRLF line endings so that if a repo is accessed
# in Windows via a file share from Linux, the scripts will work.
*.{cmd,[cC][mM][dD]} text eol=crlf
*.{bat,[bB][aA][tT]} text eol=crlf

# Force bash scripts to always use LF line endings so that if a repo is accessed
# in Unix via a file share from Windows, the scripts will work.
*.sh text eol=lf

# Force Haskell hs files to LF.
*.hs text eol=lf

# treat these as binary files
*.png binary
*.jpg binary

{-# START_FILE .github/ISSUE_TEMPLATE/bug_report.md ) #-}
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: ''
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Call Bar.foo()
2. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
Add screenshots or your code or copy error messages to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. Linux]
 - Version [e.g. 1.0.2]
 - Haskell ghc version [e.g. 8.10.4]

**Additional context**
Add any other context about the problem here.

{-# START_FILE .github/ISSUE_TEMPLATE/feature_request.md ) #-}
---
name: Feature request
about: Suggest an idea for this project
title: ''
labels: ''
assignees: ''

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.

{-# START_FILE .gitignore ) #-}
# Bak files
*~

# Installed executables
bin/

# Jupyter notebook checkpoints
.ipynb_checkpoints/

# VS GHCI debugger extension.
phoityne.log

# Output of ghcid, used by the VS extension
ghcid.txt

# Mkdocs generated HTML
/site

# Coverage data
*coverage.xml
*coverage.json
lcov.info

# local stack working dir
.stack-work/

# Visual Studio files.
*.vs

# autogenerated from pacakge.yml
*.cabal

# don't need the lockfile, Pipfile is for mkdocs only
Pipfile.lock

{-# START_FILE .readthedocs.yaml ) #-}
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

mkdocs:
  configuration: mkdocs.yml
  fail_on_warning: false

# Optionally set the version of Python and requirements required to build your docs
python:
   version: 3.7
   install:
   - requirements: docs/requirements.txt

{-# START_FILE .vscode/tasks.json ) #-}
{
  // Automatically created by phoityne-vscode extension.
  "version": "2.0.0",
  "presentation": {
    "reveal": "always",
    "panel": "new"
  },
  "tasks": [
    {
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "label": "haskell build",
      "type": "shell",
      "command": "stack build"
    },
    {
      "group": "build",
      "type": "shell",
      "label": "haskell clean & build",
      "command": "stack clean && stack build"
    },
    {
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "type": "shell",
      "label": "haskell test",
      "command": "stack test"
    },
    {
      "isBackground": true,
      "type": "shell",
      "label": "haskell watch",
      "command": "stack test --fast --haddock-deps --file-watch",
      "problemMatcher": []
    },
    {
      "label": "Run watch on startup",
      "type": "shell",
      "isBackground": true,
      "command": "stack test --fast --haddock-deps --file-watch",
      "windows": {
        "command": "stack test --fast --haddock-deps --file-watch"
      },
      "runOptions": {
        "runOn": "folderOpen"
      },
      "problemMatcher": []
    },
    {
      "label": "Run mkdocs serve",
      "type": "shell",
      "command": "pipenv run mkdocs serve",
      "problemMatcher": []
    }
  ]
}

{-# START_FILE CHANGELOG.md ) #-}
# {{name}} Changelog

## Version 0.9.3 (2021-05-18)

Set Windows package generation shell to 'cmd.exe'-

## Version 0.9.2 (2021-05-18)

Add package generation on OS X and Windows.

## Version 0.9.1 (2021-05-18)

Initial Release

{-# START_FILE LICENSE ) #-}
MIT License

Copyright (c) {{copyright}}{{^copyright}}{{year}}{{^year}}"2021"{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

{-# START_FILE Pipfile ) #-}
[[source]]
url = "https://pypi.org/simple"
verify_ssl = true
name = "pypi"

[packages]
mkdocs = "*"

[dev-packages]
pygments = "*"
python-markdown-math = "*"

[requires]
python_version = "3.9"

{-# START_FILE README.md ) #-}
# {{name}}

This is a Haskell Github template repository and Stack template file. The whole repository is contained in the Stack template [BigTemplate.hsfiles](./BigTemplate.hsfiles).

It uses [Stack](https://docs.haskellstack.org/en/stable/README/) to manage the build and dependencies, [Hspec](https://hspec.github.io/) as testing framework and to automatically discover test cases and [QuickCheck](http://www.cse.chalmers.se/~rjmh/QuickCheck/manual.html), [LeanCheck](https://github.com/rudymatela/leancheck#readme), [SmallCheck](https://hackage.haskell.org/package/smallcheck) and [Hedgehog](https://hedgehog.qa/).

To use it, see section [Usage](#usage).

[Below is actually text for usage in the project later, not needed for this template.]

Downloads and releases can be found in the section [Download](#download).

Detailed documentation can be found at [Read the Docs](https://haskelltemplate.readthedocs.io/en/latest/).

[![Haskell badge](https://img.shields.io/badge/uses-Haskell-brightgreen?style=flat)](https://www.haskell.org/)
[![HSpec badge](https://img.shields.io/badge/uses-Hspec-brightgreen?style=flat)](https://hspec.github.io/)
[![GitHub License badge](https://img.shields.io/github/license/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate)](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/blob/main/LICENSE)
[![Documentation Status](https://readthedocs.org/projects/haskelltemplate/badge/?version=latest)](https://haskelltemplate.readthedocs.io/en/latest/?badge=latest)
[more badges ...](#badges)

- [{{name}}](#testhaskell)
  - [Usage](#usage)
    - [Haskell and Stack](#haskell-and-stack)
    - [MkDocs and Pipenv](#mkdocs-and-pipenv)
    - [What is What?](#what-is-what)
      - [Scripts](#scripts)
      - [GitHub Workflows & Issue Templates](#github-workflows--issue-templates)
      - [MkDocs documentation](#mkdocs-documentation)
      - [Haskell Source](#haskell-source)
      - [Visual Studio Code](#visual-studio-code)
  - [Download](#download)
  - [Badges](#badges)
    - [GitHub Workflows](#github-workflows)
    - [CodeCov Coverage Report](#codecov-coverage-report)

## Usage

You can either use this GitHub template repository as a GitHub template for a Haskell project and manually change all occurrences of `{{name}}`, `{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}` and my name. Or use [BigTemplate.hsfiles](./BigTemplate.hsfiles) to generate a local project from this repository, using `stack new`:

```shell
stack new PROJECT_NAME https://raw.githubusercontent.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/main/BigTemplate.hsfiles
```

This template needs the following (usual) parameters to be defined:

- author-email
- author-name
- github-username
- copyright

It also understands the parameter

- license-name - to set the name of the licenses to something else but `{{license-name}}{{^license-name}}YOUR_LICENSE{{/license-name}}`.

This parameters can be set in a global or user `config.yaml` file for Stack or passed as command line arguments like this:

```shell
stack new PROJECT_NAME https://raw.githubusercontent.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/main/BigTemplate.hsfiles -p "author-email:EMAIL" -p "author-name:NAME" -p "github-username:GITUSER" -p "license-name:BSD" -p "copyright:(C) ..."
```

:warning: Warning!

The GitHub Workflow templates

- [.github/workflows/create_packages.yml](./.github/workflows/create_packages.yml)
- [.github/workflows/linux_test.yml](./.github/workflows/linux_test.yml)
- [.github/workflows/osx_test.yml](./.github/workflows/osx_test.yml)
- [.github/workflows/windows_test.yml](./.github/workflows/windows_test.yml)

are not included in the Stack template, because they contain Mustache fields themselves and would get mangled by using `stack new`. So please download the directory [.github/workflows/](./.github/workflows/) manually.

See also [documentation at Read the Docs](https://haskelltemplate.readthedocs.io/en/latest/contributing/#developing-testhaskell).

### Haskell and Stack

You need [Stack](https://docs.haskellstack.org/en/stable/README/) to install everything else (Stack installs the GHC, the Haskell compiler too). Install that using your distributions package manager, Homebrew on Macs or Chocolatey on Windows or use another way - see [Stack - Howto Install](https://docs.haskellstack.org/en/stable/README/#how-to-install).

To generate a new project named `PROJECT_NAME` using this template, you have to call `stack new` with it:

```shell
stack new PROJECT_NAME https://raw.githubusercontent.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/main/BigTemplate.hsfiles
```

Enter the directory `PROJECT_NAME` and execute

```shell
./install_build_tools
```

or, on Windows:

```shell
install_build_tools.bat
```

to locally install all needed Haskell build tools. Now calling

```shell
stack build
```

should successfully build the template project.

See also [documentation at Read the Docs](https://haskelltemplate.readthedocs.io/en/latest/contributing/#developing-testhaskell).

### MkDocs and Pipenv

To generate the documentation using MkDocs, a virtual Python environment is needed.
So, first you need to install Python, if you don't have it installed already - either from your distributions repository, using the XCode or [Homebrew](https://brew.sh/) version, or getting it from [Python.org](https://www.python.org/downloads/).

See

- [Using Python on Windows](https://docs.python.org/3/using/windows.html)
- [Using Python on a Macintosh](https://docs.python.org/3/using/mac.html)
- [Using Python on Unix Platforms](https://docs.python.org/3/using/unix.html)

In the file `Pipfile` there is a stanza saying

```ini
[requires]
python_version = "3.9"
```

That's just because I used 3.9 when generating that documentation, and Pipenv is picky about the version mentioned there. Just edit that to match your installed Python version.

Install `pipenv` using the package manager pip

```shell
pip install pipenv
```

Now you're ready to download and install the needed packages using pipenv

```shell
pipenv install --dev
```

After that you can use MkDocs.

Call

```shell
pipenv run mkdocs serve
```

in the root directory (`PROJECT_NAME`) and connect to the running webserver at [http://127.0.0.1:8000](http://127.0.0.1:8000).
This preview shows changes in realtime, so any changes to the markdown files in `docs` you
see as preview as soon as you save the file. The generated HTML files are saved in the directory
`sites`.

See also [documentation at Read the Docs](https://haskelltemplate.readthedocs.io/en/latest/contributing/#developing-testhaskell).

### What is What?

A list of all files in this template and what they do or configure.

- [README.md](./README.md) - The file that you are reading right now.
- [LICENSE](./LICENSE) - The project'S license, {{license-name}}{{^license-name}}YOUR_LICENSE{{/license-name}}.
- [CHANGELOG.md](./CHANGELOG.md) - The project's changelog.

#### Scripts

- [make_template_file.sh](./make_template_file.sh) - Unix-ish only: generate the template file [BigTemplate.hsfiles](./BigTemplate.hsfiles) from the files in this repository.
- [install_build_tools.bat](./install_build_tools.bat) - Locally installs all needed build tools using `stack install`.
- [install_build_tools.sh](./install_build_tools.sh) - Locally installs all needed build tools using `stack install`.
- [run_watch.bat](./run_watch.bat) - Watches for source code changes to continuously rebuild and run tests. Calls:

  ```shell
  stack test --fast --haddock-deps --file-watch
  ```

- [run_watch.sh](./run_watch.sh) - Watches for source code changes to continuously rebuild and run tests. Calls:

  ```shell
  stack test --fast --haddock-deps --file-watch
  ```

- [run_coverage.bat](./run_coverage.bat) - Generate a LCov coverage report `./lcov.info`, by calling

  ```shell
  stack clean
  stack test --coverage
  stack exec -- hpc-lcov --file %RESULT%\{{name}}\{{name}}-test\{{name}}-test.tix
  ```

- [run_coverage.sh](./run_coverage.sh) - Generate a LCov coverage report `./lcov.info`, by calling

  ```shell
  stack clean
  stack test --coverage
  stack exec -- hpc-lcov --file ${TIX_FILE}
  ```

- [run_codecov_coverage.bat](./run_codecov_coverage.bat) - Generates a CodeCov coverage report `./coverage.json`, by calling

  ```shell
  stack clean
  stack test --coverage
  stack exec -- hpc-codecov --verbose -o coverage.json %RESULT%\{{name}}\{{name}}-test\{{name}}-test.tix -m %MIX_DIR%\hpc
  ```

- [run_codecov_coverage.sh](./run_codecov_coverage.sh) - Generates a CodeCov coverage report `./coverage.json`, by calling

  ```shell
  stack clean
  stack test --coverage
  stack exec -- hpc-codecov --verbose -o coverage.json ${TIX} -m ${MIX_DIR}\hpc
  ```

- [run_haddock.bat](./run_haddock.bat) - Runs Haddock to generate the source documentation in `docs/html/`. Calls

  ```shell
  stack clean

  stack haddock --haddock-arguments="--odir=docs/html --html --built-in-themes"

  ```

- [run_haddock.sh](./run_haddock.sh) - Runs Haddock to generate the source documentation in `docs/html/`. Calls

  ```shell
  stack clean

  stack haddock --haddock-arguments="--odir=docs/html --html --built-in-themes"

  ```

- [run_hoogle.bat](./run_hoogle.bat) - Runs Hoogle to create the local search index. Calls:

  ```shell
  stack hoogle -- generate --local
  stack hoogle -- server --local --port=8080
  ```

- [run_hoogle.sh](./run_hoogle.sh)- Runs Hoogle to create the local search index. Calls:

  ```shell
  stack hoogle -- generate --local
  stack hoogle -- server --local --port=8080
  ```

- [run_code.bat](./run_code.bat) - Script to start Visual Studio Code (Insiders) with the Stack environment, so we don't need to add Stack's local `bin` directory to the user PATH. Calls

  ```shell
  stack exec "%LOCALAPPDATA%\Programs\Microsoft VS Code Insiders\bin\code-insiders" {{name}}.code-workspace
  ```

- [run_code.sh](./run_code.sh) - Script to start Visual Studio Code (Insiders) with the Stack environment, so we don't need to add Stack's local `bin` directory to the user PATH.

  ```shell
  stack exec code-insiders {{name}}.code-workspace
  ```

- [make_sh_executable.bat](./make_sh_executable.bat) - Windows only, recursively sets the executable bit of all shell scripts with a suffix of `.sh`.

- [./scripts/get_changelog.sh](./scripts/get_changelog.sh) - Script used by the GitHub workflow [create_packages.yml](./.github/workflows/create_packages.yml), to extract the latest part out of the changelog, the file [CHANGELOG.md](./CHANGELOG.md).

#### GitHub Workflows & Issue Templates

Directory [`.github/ISSUE_TEMPLATE`](./github/ISSUE_TEMPLATE/):

- [bug_report.md](./.github/ISSUE_TEMPLATE/bug_report.md) - Bug report template for GitHub
- [feature_request.md](./.github/ISSUE_TEMPLATE/feature_request.md) - Feature request template for GitHub

Directory [`.github/workflows/`](./.github/workflows/):

:warning: Warning!

The GitHub workflow files are not included in the Stack template, because they use Moustache fields themselves and get mangled by `stack new`. To use them, you have to download them from [GitHub](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/tree/main/.github/workflows).

- [create_packages.yml](./.github/workflows/create_packages.yml) - A GitHub workflow to build the executable(s), install them to `./bin` and create a GitHub release (like [Latest Release at GitHub](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/releases/latest)). This workflow runs on all 3 GitHub OSes, Linux, Mac OS X and Windows, it is started after tagging the source with a release tag of the form `v.?.?.?` or manually creating a release using GitHubs web-frontend.
- [linux_test.yml](./.github/workflows/linux_test.yml) - Run tests and coverage tests on Linux in 2 jobs, upload the coverage results to Codecov.
- [osx_test.yml](./.github/workflows/osx_test.yml) - Run tests and coverage tests on Mac OS X in 2 jobs, upload the coverage results to Codecov.
- [windows_test.yml](./.github/workflows/windows_test.yml) - Run tests and coverage tests on Windows in 2 jobs, upload the coverage results to Codecov.

#### MkDocs documentation

- [Pipfile](./Pipfile) - Packages nedded by MkDocs to install using `pipenv` and the package `mkdocs` itself.
- [mkdocs.yml](./mkdocs.yml) - The configuration file for MkDocs, contains the website's index:

  ```YML
  nav:
  - Home: index.md
  - Project Links:
      - "Downloads": https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/releases/latest
      - "GitHub Project Page": "https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}"
      - "Report a Bug or a Feature Request": "https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/issues/new/choose"
      - "Issue Tracker at GitHub": "https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/issues"
  - "Installation & Usage":
      - "Installation & Usage": usage.md
      - License: license.md
  - "Reference Documentation":
      - "Library Reference": html/index.html
  - Contributing:
      - Contributing: contributing.md
  ```

- [.readthedocs.yaml](./.readthedocs.yaml) - The configuration for [Read the Docs](https://readthedocs.org/), to host the generated documentation.

Directory [docs](./docs):

- [requirements.txt](docs/requirements.txt) - Packages (plugins for MkDocs) that have to be installed by Read the Docs to generate the documentation.
- [index.md](./docs/index.md) - The documentation's home page.
- [contributing.md](./docs/contributing.md) - Usage information.
- [contributing.md](./docs/contributing.md) - Information on how to contribute to the project.

Directory [docs/html/](./docs/html/): contains the documentation generated by Haddock using the script [run_haddock.sh](./run_haddock.sh)/[run_haddock.bat](./run_haddock.bat). Sadly I haven't found a way to generate that documentation using `mkdocs build`, which is what Read the Docs calls to build it. So for now it is included in the source repository (but not the Stack template file).

#### Haskell Source

Stack, Cabal and HPack configuration:

- [stack.yaml](./stack.yaml) - Stack configuration file, mainly the resolver (LTS) configuration and some extra packages.
- [stack.yaml.lock](./stack.yaml.lock) - Stack lockfile containing package/LTS versions.
- [package.yaml](./package.yaml) - The main Stack/HPack configuration file.
- [Setup.hs](./Setup.hs) - Cabal `Setup.hs` file.
- [hie.yaml](./hie.yaml) - The Hie configuration file, generated using

  ```shell
  stack exec gen-hie > hie.yaml
  ```

The Haskell source consists of three parts, the library in the directory `src`, the command line program in the directory `app` and the tests in the directory `test`.

- [./src/Lib.hs](./src/Lib.hs) - The library, Fibonacci and golden ratio calculations (you certainly have never seen anything similar!)
- [./app/Main.hs](./app/Main.hs) - The command line program, does nothing else but parse the command line arguments and call the library functions.
- [./test/Spec.hs](./test/Spec.hs) - The entry point of the tests.
- [./test/FibonacciSpec.hs](./test/FibonacciSpec.hs) - Fibonacci test cases, automatically discovered by Hspec
- [./test/GoldenRatioSpec.hs](./test/GoldenRatioSpec.hs) - Golden ratio test cases, automatically discovered by Hspec.

#### Visual Studio Code

- [run_code.bat](./run_code.bat) - Script to start Visual Studio Code (Insiders) with the Stack environment, so we don't need to add Stack's local `bin` directory to the user PATH. Calls

  ```shell
  stack exec "%LOCALAPPDATA%\Programs\Microsoft VS Code Insiders\bin\code-insiders" {{name}}.code-workspace
  ```

- [run_code.sh](./run_code.sh) - Script to start Visual Studio Code (Insiders) with the Stack environment, so we don't need to add Stack's local `bin` directory to the user PATH.

  ```shell
  stack exec code-insiders {{name}}.code-workspace
  ```

- [{{name}}.code-workspace](./{{name}}.code-workspace) - The Visual Studio Code workspace file.
- [.vscode/](./.vscode/) - Directory containing additional Visual Studio Code configuration.

## Download

That's actually just a placeholder for real text, in this template repo you only get to download a Fibonacci and golden ration command line program for Linux, OS X and Windows.

Download the latest release: [Latest Release at GitHub](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/releases/latest)

Changelog of all versions: [CHANGELOG.md](./CHANGELOG.md)

All releases: [All Releases at GitHub](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/releases)

## Badges

### GitHub Workflows

[![Tests Mac OS X latest](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/actions/workflows/osx_test.yml/badge.svg)](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/actions/workflows/osx_test.yml)
[![Tests Ubuntu 20.04](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/actions/workflows/linux_test.yml/badge.svg)](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/actions/workflows/linux_test.yml)
[![Tests Windows 2019](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/actions/workflows/windows_test.yml/badge.svg)](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/actions/workflows/windows_test.yml)

### CodeCov Coverage Report

[![codecov](https://codecov.io/gh/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/branch/main/graph/badge.svg?token=L988V53VRA)](https://codecov.io/gh/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate)

{-# START_FILE Setup.hs ) #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE {{name}}.code-workspace ) #-}
{
	"folders": [
		{
			"path": "."
		}
	],
	"settings": {
		"haskell.hlint.executablePath": "hlint",
		"ormolu.executablePath": "ormolu",
		"ghcid.command": "ghcid",
		"coverage-gutters.coverageReportFileName": "lcov.info",
		"files.trimFinalNewlines": true,
		"files.trimTrailingWhitespace": true,
		"FSharp.suggestGitignore": false
	},
	"launch": {
		"version": "0.2.0",
		"configurations": [
			{
				"type": "ghc",
				"request": "launch",
				"name": "haskell(stack)",
				"internalConsoleOptions": "openOnSessionStart",
				"workspace": "${workspaceFolder}",
				"startup": "${workspaceFolder}/test/Spec.hs",
				"startupFunc": "",
				"startupArgs": "",
				"stopOnEntry": false,
				"mainArgs": "",
				"ghciPrompt": "H>>= ",
				"ghciInitialPrompt": "Prelude>",
				"ghciCmd": "stack ghci --test --no-load --no-build --main-is TARGET",
				"ghciEnv": {},
				"logFile": "${workspaceFolder}/.vscode/phoityne.log",
				"logLevel": "WARNING",
				"forceInspect": false
			}
		]
	}
}

{-# START_FILE app/Main.hs ) #-}
-- SPDX-License-Identifier: MIT
-- Copyright (C) 2021 Roland Csaszar
--
-- Project:  {{name}}
-- File:     Main.hs
-- Date:     21.05.2021
--
--------------------------------------------------------------------------------
{-# LANGUAGE DeriveDataTypeable #-}

-- | Module containing the program's main entry point.
module Main where

import qualified Lib
import System.Console.CmdArgs
  ( Data,
    Typeable,
    cmdArgsMode,
    cmdArgsRun,
    details,
    help,
    summary,
    typ,
    (&=),
  )
import Text.Printf (printf)

-- | Record to hold the command line arguments, `fibonacci` and `goldenRatio`.
data CmdLine = CmdLine
  { -- | The number of elements in the Fibonacci list to generate.
    fibonacci :: Int,
    -- | The length to apply the golden ratio to.
    goldenRatio :: Double
  }
  deriving (Data, Typeable, Show, Eq)

-- | The program's command line parser definition.
cmdLine :: CmdLine
cmdLine =
  CmdLine
    { -- default value | placeholder | description
      fibonacci = 50 &= typ "LENGTH" &= help "The number of elements in the list of Fibonacci numbers",
      goldenRatio = 4 &= typ "LENGTH" &= help "The length to apply the golden ratio to."
    }
    &= help "Calculates the Fibonacci numbers and the golden ratio to a given length."
    &= summary "Version 0.0.1"
    &= details
      [ "Calculates the Fibonacci numbers and the golden ratio to a given length.",
        "",
        "Example:",
        "\t{{name}} --fibonacci=35 --goldenratio=7"
      ]

-- | Main entry point.
main :: IO ()
main =
  do
    let mode = cmdArgsMode cmdLine
    CmdLine {fibonacci, goldenRatio} <- cmdArgsRun mode
    printf "\n"
    printf "The first %v Fibonacci numbers are: \n" fibonacci
    print $ Lib.fibZip fibonacci
    printf "\n"
    printf "The golden ratio to the length of %v is: " goldenRatio
    print $ goldenRatio * Lib.goldenRatio 8

{-# START_FILE codecov.yml ) #-}
# SPDX-License-Identifier: {{license-name}}{{^license-name}}YOUR_LICENSE{{/license-name}}
# Copyright (C) {{copyright}}{{^copyright}}{{year}}{{^year}}"2021"{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}
#
# Project:  {{name}}
# File:     codecov.yml
# Date:     21.05.2021
###############################################################################
ignore:
    - "./test/"

{-# START_FILE docs/contributing.md ) #-}
# Contributing

Any help is welcome!

If you encounter a problem using {{name}}, a task it not as easy as you'd like it to be or you'd like something added to it: open an issue at GitHub, see section [Report Issues](#report-issues-bugs-and-feature-requests).

- [Contributing](#contributing)
  - [Report Issues (Bugs and Feature Requests)](#report-issues-bugs-and-feature-requests)
  - [Forking the Repository](#forking-the-repository)
    - [Github Documentation on Collaborating with Issues and Pull Requests](#github-documentation-on-collaborating-with-issues-and-pull-requests)
  - [Developing {{name}}](#developing-testhaskell)
    - [Changing and Generating Documentation](#changing-and-generating-documentation)
      - [Installing Dependencies](#installing-dependencies)
      - [MkDocs Files](#mkdocs-files)
      - [Haddock](#haddock)
      - [Read the Docs Configuration](#read-the-docs-configuration)
      - [GitHub Documentation](#github-documentation)
    - [Haskell Source](#haskell-source)
      - [Pipenv and MkDocs](#pipenv-and-mkdocs)
      - [Haskell Stack](#haskell-stack)
      - [Source Code and Tests](#source-code-and-tests)
        - [Library Sources](#library-sources)
        - [Executable Sources](#executable-sources)
        - [Test Sources](#test-sources)
      - [Build](#build)
  - [CodeCov Configuration](#codecov-configuration)
  - [GitHub Workflows](#github-workflows)
  - [GitHub Issue Templates](#github-issue-templates)
  - [What is What? - List of all Files](#what-is-what---list-of-all-files)
    - [Scripts](#scripts)
    - [GitHub Workflows & Issue Templates](#github-workflows--issue-templates)
    - [MkDocs documentation](#mkdocs-documentation)
    - [Haskell Source](#haskell-source-1)
    - [Visual Studio Code](#visual-studio-code)

## Report Issues (Bugs and Feature Requests)

Please help making {{name}} better by filing bug reports and feature requests.

File a bug report at [Github](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/issues/new?assignees=&labels=&template=bug_report.md&title=).
Add a feature request at [Github](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/issues/new?assignees=&labels=&template=feature_request.md&title=).
Take a look at the [Issue Tracker at GitHub](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/issues)

## Forking the Repository

If you'd like to contribute directly, e.g. better the documentation, add another language or write some source code: fork {{name}} by clicking the `Fork` button in the upper right corner of the GitHub project website. Check out your fork of {{name}} using the URL from the `Code` button of your fork on Github. The URL should be something like github.com/YOUR_USERNAME/{{name}}.git.

Details about how to fork a repository on Github are [here](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo).

Make your changes, push them to your forked repository and make a pull-request (e.g. using the Pull request-button above and right of GitHubs source file view).

See [GitHub on Pull-Requests](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/proposing-changes-to-your-work-with-pull-requests) and another [How-To](https://github.com/MarcDiethelm/contributing/blob/master/README.md).

### Github Documentation on Collaborating with Issues and Pull Requests

See GitHub's documentation about how to contribute for details: [Collaborating with issues and pull requests](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests).

## Developing {{name}}

### Changing and Generating Documentation

#### Installing Dependencies

To generate the documentation using MkDocs, a virtual Python environment is needed. First you need to install Python, if you don't have it installed already - either from your distributions repository, using the XCode or [Homebrew](https://brew.sh/) version, or getting it from [Python.org](https://www.python.org/downloads/).

See

- [Using Python on Windows](https://docs.python.org/3/using/windows.html)
- [Using Python on a Macintosh](https://docs.python.org/3/using/mac.html)
- [Using Python on Unix Platforms](https://docs.python.org/3/using/unix.html)

In the file [`Pipfile`](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/blob/main/Pipfile) there is a stanza saying

```ini
[requires]
python_version = "3.9"
```

That's just because I used 3.9 when generating that documentation, and Pipenv is picky about the version mentioned there. Just edit that to match your installed Python version.

Install `pipenv` using the package manager pip

```shell
pip install pipenv
```

Now you're ready to download and install the needed packages using pipenv

```shell
pipenv install --dev
```

After that you can use MkDocs.

Call

```shell
pipenv run mkdocs serve
```

in the root directory of {{name}} and connect to the running webserver at [http://127.0.0.1:8000](http://127.0.0.1:8000).
This preview shows changes in realtime, so any changes to the markdown files in `docs` you see as preview as soon as you save the file. The generated HTML files are saved in the directory `sites`.

#### MkDocs Files

- `mkdocs.yml` - the MkDocs configuration, specially the configuration of the navigation sidebar in `nav` which you may need to edit

```yml
  nav:
    - Home: index.md
    - Project Links:
        - "Downloads": https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/releases/latest
        - "GitHub Project Page": "https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}"
        - "Report a Bug or a Feature Request": "https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/issues/new/choose"
        - "Issue Tracker at GitHub": "https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/issues"
    - "Installation & Usage":
        - "Installation & Usage": usage.md
        - "License": license.md
    - "API Documentation":
        - "Library Reference": html/index.html
    - Contributing:
        - Contributing: contributing.md
```

- `docs/` - the markdown files that are used to generate the
   HTML sites in the directory `sites/`
- `docs/html` - the Haddock generated API reference files (as HTML). See [Haddock](#haddock)

#### Haddock

[Haddock](https://www.haskell.org/haddock/) is a Haskell code documentation tool that generates linked HTML documentation of your modules, functions and types. Is is generated using

```shell
stack stack haddock
```

In the project root there are the two scripts

- [run_haddock.bat](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/blob/main/run_haddock.bat)
- [run_haddock.sh](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/blob/main/run_haddock.sh)
which let Haddock generate the API documentation in the directory `docs/html` using the command

```shell
stack haddock --haddock-arguments="--odir=docs/html --html --built-in-themes"
```

!!! Warning
    The directory `docs/html` and its content need to be checked in to Git, because I didn't find a way to let Read the Docs generate the Haddock documentation when building the documentation. If you are not using Read the Docs to host your Documentation, this may not matter for you.

#### Read the Docs Configuration

- `.readthedocs.yaml` the configuration for Read the Docs
- `docs/requirements.txt` the packages needed by MkDocs
   when generating the documentation at Read the Docs.
   Locally needed packages are configured in `Pipfile`

Read the Docs automatically generates the MkDocs documentation after each `git push`.

#### GitHub Documentation

The Markdown documentation for GitHub are the files [README.md](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}-calendar/blob/main/README.md) and [CHANGELOG.md](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}-calendar/blob/main/CHANGELOG.md) in the project root directory.

### Haskell Source

Before you can use the configured Tools of this project, you have to download and install the needed tools.

#### Pipenv and MkDocs

To generate the documentation using MkDocs (see [Changing and Generating Documentation](#changing-and-generating-documentation)), a virtual Python environment is needed. So, first you need to install Python, if you don't have it installed already - either from your distributions repository, using the XCode or [Homebrew](https://brew.sh/) version, or getting it from [Python.org](https://www.python.org/downloads/).

In the file [`Pipfile`](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/blob/main/Pipfile) there is a stanza saying

```ini
[requires]
python_version = "3.9"
```

  That's just because I used 3.9 when generating that
documentation, and Pipenv is picky about the version mentioned
there. Just edit that to match your installed
Python version.
Install `pipenv` using the package
manager pip

```shell
pip install pipenv
```

Now you're ready to download and install the needed packages using pipenv

```shell
pipenv install --dev
```

After that you should be able to use the executable `mkdocs` in the local virtual Python environment in your project root using `pipenv run`:

```shell
pipenv run mkdocs --version
```

#### Haskell Stack

{{name}} uses [Stack](https://docs.haskellstack.org/en/stable/README/) as a build tool and to manage dependencies. You can install it using your distribution's package manager, [Homebrew](https://formulae.brew.sh/formula/haskell-stack) on Macs or [Chocolatey](https://community.chocolatey.org/packages/haskell-stack) on Windows. On Linux I advise you to use the [install script](https://docs.haskellstack.org/en/latest/install_and_upgrade/) with Curl

```shell
curl -sSL https://get.haskellstack.org/ | sh
```

or Wget:

```shell
wget -qO- https://get.haskellstack.org/ | sh
```

because the Stack packages are old (<2.0) and you'd need to install using `stack upgrade` anyway. The Homebrew and Chocolatey packages are up-to-date.

You do not need to install [GHC](https://www.haskell.org/ghc/), the Haskell compiler, or [Cabal](https://www.haskell.org/cabal/), Stack does that for us in the next step.

If Stack is working, which you can test with

```shell
stack --version
```

it's time to install all needed tools for the project. There are two scripts

- [./install_build_tools.bat](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/blob/main/install_build_tools.bat) on Windows
- [./install_build_tools.sh](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/blob/main/install_build_tools.sh) on a unixish OS like Linux or Mac OS X

that do that for us. The scripts call the following commands:

```shell
pipenv install --dev
stack build --copy-compiler-tool hlint
stack build --copy-compiler-tool hoogle
stack build --copy-compiler-tool implicit-hie
stack build --copy-compiler-tool ghcid
stack build --copy-compiler-tool haskell-dap
stack build --copy-compiler-tool ghci-dap
stack build --copy-compiler-tool haskell-debug-adapter
stack build --copy-compiler-tool ormolu
stack build --copy-compiler-tool weeder
stack exec gen-hie > hie.yaml
```

so afterwards we can use [HLint](https://hackage.haskell.org/package/hlint-1.7/src/hlint.htm), [Hoogle](https://wiki.haskell.org/Hoogle), [gen-hie](https://github.com/Avi-D-coder/implicit-hie#readme), [GHCi](https://github.com/ndmitchell/ghcid#readme), [Debug Adapter](https://github.com/phoityne/haskell-debug-adapter/), [Ormolu](https://github.com/tweag/ormolu) and [Weeder](https://github.com/ocharles/weeder).

#### Source Code and Tests

The sources of the project's library are located in the directory `src`, the executable in the directory `app` and the tests in `test`.

##### Library Sources

All sources of the library `Lib` reside in the directory `./src`.

- [./src/Lib.hs](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/blob/main/src/Lib.hs) - The module `Lib` containing  some functions to calculate the Fibonacci sequence and the golden ratio.

##### Executable Sources

Sources needed to build the executable `{{name}}-exe` are contained in the directory `./app`.

- [./app/Main.hs](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/blob/main/app/Main.hs) - The main entry point of the executable, parses the command line and calls the Fibonacci and golden ratio functions.

##### Test Sources

All test cases and everything test related: directory `./test`. Uses [Hspec](https://hspec.github.io/) as testing framework and to automatically discover the tests. And [QuickCheck](http://www.cse.chalmers.se/~rjmh/QuickCheck/manual.html), [LeanCheck](https://github.com/rudymatela/leancheck#readme), [SmallCheck](https://hackage.haskell.org/package/smallcheck) and [Hedgehog](https://hedgehog.qa/).

- [./test/Spec.hs](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/blob/main/test/Spec.hs) - The main entry point of the test, contains no source code, just the header to let HSpec automatically discover the other test sources.
- [./test/FibonacciSpec.hs](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/blob/main/test/FibonacciSpec.hs) - Test the Fibonacci number generation.
- [./test/GoldenRatioSpec.hs](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/blob/main/test/GoldenRatioSpec.hs) - Test the golden ratio calculations.

#### Build

[Stack](https://docs.haskellstack.org/en/stable/README/) is used to build the project.

```shell
stack build
```

builds the library and executable (but not the tests).

To build and run the tests use

```shell
stack test
```

To rerun the build and test when some file has been changed, use

```shell
stack test --file-watch
```

I like to also generate Haddock documentation for all dependencies and use the non-optimized compilation:

```shell
stack test --fast --haddock-deps --file-watch
```

This is also what the two scripts

- [./run_watch.bat](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/blob/main/run_watch.bat)
- [./run_watch.sh](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/blob/main/run_watch.sh)

do when they are called.

To get coverage data from the tests, Stack has to be called with `--coverage`, but first the project has to be recompiled, so we `clean` it.

```shell
stack clean
stack test --coverage
```

which generates `.tix` and `.mix` files needed by programs which generate alternative output formats, like LCov.

To get LCov output saved to the file `./lcov.info`, we need the executable `hpc-lcov` - one of the dependencies of the test executable and automatically installed by Stack:

```shell
stack exec -- hpc-lcov --file $TIX_PATH/{{name}}/{{name}}-test/{{name}}-test.tix
```

`TIX_PATH` is the output of

```shell
stack path --local-hpc-root
```

There exists two scripts

- [./run_coverage.bat](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/blob/main/run_coverage.bat)
- [./run_coverage.sh](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/blob/main/run_coverage.sh)

which run all these steps to generate the LCov result file `./lcov.info`.

## CodeCov Configuration

- [./codecov.yml](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/blob/main/codecov.yml) - CodeCov configuration file, lists all files to be ignored in coverage result calculations:

```YAML
  ignore:
    - "./test/"
```

Used in the workflows [linux_test.yml](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/blob/main/.github/workflows/linux_test.yml),
[osx_test.yml](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/blob/main/.github/workflows/osx_test.yml) and [windows_test.yml](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/blob/main/.github/workflows/windows_test.yml) - see [GitHub Workflows](#github-workflows)

## GitHub Workflows

All tests and builds are executed on Linux, Mac OS X and Windows.

!!! Warning

    The GitHub workflow files are not included in the Stack template, because they use Moustache fields themselves and get mangled by `stack new`. To use them, you have to download them from [GitHub](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/tree/main/.github/workflows).

These are the GitHub workflows defined in the directory `.github/workflows`

- `create_packages.yml` creates and uploads the executable an each OS (Linux, Mac OS X and Windows) and
  generates a new GitHUb release with these files appended. Runs automatically after tagging
  the source with a release tag of the form `v?.?.?`. Appends the newest entry in [CHANGELOG.md](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/blob/main/CHANGELOG.md) to the release - script [`scripts/get_changelog.sh`](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/blob/main/scripts/get_changelog.sh)
  See the [latest release](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/releases/latest) as an example
- `linux_test.yml` runs the tests and coverage tests on Linux, uploads the test results as artifacts,
  uploads the coverage results to CodeCov.
- `osx_test.yml` runs the tests and coverage tests on Mac OS X, uploads the test results as artifacts,
  uploads the coverage results to CodeCov.
- `windows_test.yml` runs the tests and coverage tests on Windows, uploads the test results as artifacts,
  uploads the coverage results to CodeCov.

The badges of the workflows are linked in the section [Badges](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}#badges )

## GitHub Issue Templates

Issue templates for GitHub in `.github/ISSUE_TEMPLATE/`

- `bug_report.md` Bug report template
- `feature_request.md` Feature request template

## What is What? - List of all Files

A list of all files in this template and what they do or configure.

- `./README.md` - The file that you are reading right now.
- `./LICENSE` - The project'S license, {{license-name}}{{^license-name}}YOUR_LICENSE{{/license-name}}.
- `./CHANGELOG.md` - The project's changelog.

### Scripts

- `./BigTemplate.hsfiles` from the files in this repository.
- `./install_build_tools.bat` - Locally installs all needed build tools using `stack install`.
- `./install_build_tools.sh` - Locally installs all needed build tools using `stack install`.
- `./run_watch.bat` - Watches for source code changes to continuously rebuild and run tests. Calls:

```shell
stack test --fast --haddock-deps --file-watch
```

- `./run_watch.sh` - Watches for source code changes to continuously rebuild and run tests. Calls:

```shell
stack test --fast --haddock-deps --file-watch
```

- `./run_coverage.bat` - Generate a LCov coverage report `./lcov.info`, by calling

```shell
stack clean
stack test --coverage
stack exec -- hpc-lcov --file %RESULT%\{{name}}\{{name}}-test\{{name}}-test.tix
```

- `./run_coverage.sh` - Generate a LCov coverage report `./lcov.info`, by calling

```shell
stack clean
stack test --coverage
stack exec -- hpc-lcov --file ${TIX_FILE}
```

- `./run_codecov_coverage.bat` - Generates a CodeCov coverage report `./coverage.json`, by calling

```shell
stack clean
stack test --coverage
stack exec -- hpc-codecov --verbose -o coverage.json %RESULT%\{{name}}\{{name}}-test\{{name}}-test.tix -m %MIX_DIR%\hpc
```

- `./run_codecov_coverage.sh` - Generates a CodeCov coverage report `./coverage.json`, by calling

```shell
stack clean
stack test --coverage
stack exec -- hpc-codecov --verbose -o coverage.json ${TIX} -m ${MIX_DIR}\hpc
```

- `./run_haddock.bat` - Runs Haddock to generate the source documentation in `docs/html/`. Calls

```shell
stack clean

stack haddock --haddock-arguments="--odir=docs/html --html --built-in-themes"

```

- `./run_haddock.sh` - Runs Haddock to generate the source documentation in `docs/html/`. Calls

```shell
stack clean

stack haddock --haddock-arguments="--odir=docs/html --html --built-in-themes"

```

- `./run_hoogle.bat` - Runs Hoogle to create the local search index. Calls:

```shell
stack hoogle -- generate --local
stack hoogle -- server --local --port=8080
```

- `./run_hoogle.sh`- Runs Hoogle to create the local search index. Calls:

```shell
stack hoogle -- generate --local
stack hoogle -- server --local --port=8080
```

- `./run_code.bat` - Script to start Visual Studio Code (Insiders) with the Stack environment, so we don't need to add Stack's local `bin` directory to the user PATH. Calls

```shell
stack exec "%LOCALAPPDATA%\Programs\Microsoft VS Code Insiders\bin\code-insiders" {{name}}.code-workspace
```

- `./run_code.sh` - Script to start Visual Studio Code (Insiders) with the Stack environment, so we don't need to add Stack's local `bin` directory to the user PATH.

```shell
stack exec code-insiders {{name}}.code-workspace
```

- `./make_sh_executable.bat` - Windows only, recursively sets the executable bit of all shell scripts with a suffix of `.sh`.

- `./CHANGELOG.md`.

### GitHub Workflows & Issue Templates

Directory `./github/ISSUE_TEMPLATE/`:

- `./.github/ISSUE_TEMPLATE/bug_report.md` - Bug report template for GitHub
- `./.github/ISSUE_TEMPLATE/feature_request.md` - Feature request template for GitHub

Directory `./.github/workflows/`:

!!! Warning
    The GitHub workflow files are not included in the Stack template, because they use Moustache fields themselves and get mangled by `stack new`. To use them, you have to download them from [GitHub](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/tree/main/.github/workflows).

- `https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/releases/latest``. This workflow runs on all 3 GitHub OSes, Linux, Mac OS X and Windows, it is started after tagging the source with a release tag of the form `v.?.?.?` or manually creating a release using GitHubs web-frontend.
- `./.github/workflows/linux_test.yml` - Run tests and coverage tests on Linux in 2 jobs, upload the coverage results to Codecov.
- `./.github/workflows/osx_test.yml` - Run tests and coverage tests on Mac OS X in 2 jobs, upload the coverage results to Codecov.
- `./.github/workflows/windows_test.yml` - Run tests and coverage tests on Windows in 2 jobs, upload the coverage results to Codecov.

### MkDocs documentation

- `./Pipfile` - Packages nedded by MkDocs to install using `pipenv` and the package `mkdocs` itself.
- `./mkdocs.yml` - The configuration file for MkDocs, contains the website's index:

```YML
nav:
- Home: index.md
- Project Links:
    - "Downloads": https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/releases/latest
    - "GitHub Project Page": "https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}"
    - "Report a Bug or a Feature Request": "https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/issues/new/choose"
    - "Issue Tracker at GitHub": "https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/issues"
- "Installation & Usage":
    - "Installation & Usage": usage.md
    - License: license.md
- "Reference Documentation":
    - "Library Reference": html/index.html
- Contributing:
    - Contributing: contributing.md
```

- `https://readthedocs.org/`, to host the generated documentation.

Directory `./docs`:

- `docs/requirements.txt` - Packages (plugins for MkDocs) that have to be installed by Read the Docs to generate the documentation.
- `./docs/index.md` - The documentation's home page.
- `./docs/contributing.md` - Usage information.
- `./docs/contributing.md` - Information on how to contribute to the project.

Directory `./run_haddock.bat`. Sadly I haven't found a way to generate that documentation using `mkdocs build`, which is what Read the Docs calls to build it. So for now it is included in the source repository (but not the Stack template file).

### Haskell Source

Stack, Cabal and HPack configuration:

- `./stack.yaml` - Stack configuration file, mainly the resolver (LTS) configuration and some extra packages.
- `./stack.yaml.lock` - Stack lockfile containing package/LTS versions.
- `./package.yaml` - The main Stack/HPack configuration file.
- `./Setup.hs` - Cabal `Setup.hs` file.
- `./hie.yaml` - The Hie configuration file, generated using

```shell
stack exec gen-hie > hie.yaml
```

The Haskell source consists of three parts, the library in the directory `src`, the command line program in the directory `app` and the tests in the directory `test`.

- `./src/Lib.hs` - The library, Fibonacci and golden ratio calculations (you certainly have never seen anything similar!)
- `./app/Main.hs` - The command line program, does nothing else but parse the command line arguments and call the library functions.
- `./test/Spec.hs` - The entry point of the tests.
- `./test/FibonacciSpec.hs` - Fibonacci test cases, automatically discovered by Hspec
- `./test/GoldenRatioSpec.hs` - Golden ratio test cases, automatically discovered by Hspec.

### Visual Studio Code

- `./run_code.bat` - Script to start Visual Studio Code (Insiders) with the Stack environment, so we don't need to add Stack's local `bin` directory to the user PATH. Calls

```shell
stack exec "%LOCALAPPDATA%\Programs\Microsoft VS Code Insiders\bin\code-insiders" {{name}}.code-workspace
```

- `./run_code.sh` - Script to start Visual Studio Code (Insiders) with the Stack environment, so we don't need to add Stack's local `bin` directory to the user PATH.

```shell
stack exec code-insiders {{name}}.code-workspace
```

- `./{{name}}.code-workspace` - The Visual Studio Code workspace file.
- `./.vscode/` - Directory containing additional Visual Studio Code configuration.

{-# START_FILE docs/index.md ) #-}
# {{name}}

This is a Haskell Github template repository and Stack template file. The whole repository is contained in the Stack template [BigTemplate.hsfiles](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/blob/main/BigTemplate.hsfiles)

Information about the [Usage](./usage.md).

[This is senseless for the Stack template, meant for the 'real' project.]
Downloads and releases can be found in the section [Download](./usage.md#download)

[Contributing](./contributing.md) has information about how to contribute to {{name}}, by
filing bug reports or feature requests, to contributing source code, to adding documentation
or translations or any other way you can help {{name}}.

## Links

Further Information about Haskell, Stack and Stack project templates.

- [Haskell](https://www.haskell.org/)
- [Stack](https://docs.haskellstack.org/en/stable/GUIDE/)
- [Stack Templates](https://docs.haskellstack.org/en/stable/GUIDE/#fun-features)

{-# START_FILE docs/license.md ) #-}
# License

{{name}} is licensed under the {{license-name}}{{^license-name}}YOUR_LICENSE{{/license-name}} license:

```text

{{license-name}}{{^license-name}}YOUR_LICENSE{{/license-name}} License

Copyright (c) {{copyright}}{{^copyright}}{{year}}{{^year}}"2021"{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LI{{license-name}}{{^license-name}}YOUR_LICENSE{{/license-name}}ED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```

{-# START_FILE docs/requirements.txt ) #-}
python-markdown-math==0.8

{-# START_FILE docs/usage.md ) #-}
# Installation & Usage

## Installation

You can either use this GitHub template repository as a GitHub template for a Haskell project and manually change all occurrences of `{{name}}`, `{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}` and my name. Or use `BigTemplate.hsfiles` to generate a local project from this repository, using `stack new`:

```shell
stack new PROJECT_NAME https://raw.githubusercontent.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/main/BigTemplate.hsfiles
```

This template needs the following (usual) parameters to be defined:

- author-email
- author-name
- github-username
- copyright

It also understands the parameter

- license-name - to set the name of the licenses to something else but `{{license-name}}{{^license-name}}YOUR_LICENSE{{/license-name}}`.

This parameters can be set in a global or user `config.yaml` file for Stack or passed as command line arguments like this:

```shell
stack new PROJECT_NAME https://raw.githubusercontent.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/main/BigTemplate.hsfiles -p "author-email:EMAIL" -p "author-name:NAME" -p "github-username:GITUSER" -p "license-name:BSD" -p "copyright:(C) ..."
```

Information on how to install Stack you find [below](#haskell-stack).

!!! Warning
    The GitHub Workflow templates
    - [.github/workflows/create_packages.yml](./.github/workflows/create_packages.yml)
    - [.github/workflows/linux_test.yml](./.github/workflows/linux_test.yml)
    - [.github/workflows/osx_test.yml](./.github/workflows/osx_test.yml)
    - [.github/workflows/windows_test.yml](./.github/workflows/windows_test.yml)
    are not included in the Stack template, because they contain Mustache fields themselves and would get mangled by using `stack new`. So please download the directory [.github/workflows/](./.github/workflows/) manually.

Before you can use the configured Tools of this project, you have to download and install the needed tools.

#### Pipenv and MkDocs

To generate the documentation using MkDocs (see [Changing and Generating Documentation](#changing-and-generating-documentation)), a virtual Python environment is needed. So, first you need to install Python, if you don't have it installed already - either from your distributions repository, using the XCode or [Homebrew](https://brew.sh/) version, or getting it from [Python.org](https://www.python.org/downloads/).

In the file [`Pipfile`](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/blob/main/Pipfile) there is a stanza saying

```ini
[requires]
python_version = "3.9"
```

  That's just because I used 3.9 when generating that
documentation, and Pipenv is picky about the version mentioned
there. Just edit that to match your installed
Python version.
Install `pipenv` using the package
manager pip

```shell
pip install pipenv
```

Now you're ready to download and install the needed packages using pipenv

```shell
pipenv install --dev
```

After that you should be able to use the executable `mkdocs` in the local virtual Python environment in your project root using `pipenv run`:

```shell
pipenv run mkdocs --version
```

#### Haskell Stack

{{name}} uses [Stack](https://docs.haskellstack.org/en/stable/README/) as a build tool and to manage dependencies. You can install it using your distribution's package manager, [Homebrew](https://formulae.brew.sh/formula/haskell-stack) on Macs or [Chocolatey](https://community.chocolatey.org/packages/haskell-stack) on Windows. On Linux I advise you to use the [install script](https://docs.haskellstack.org/en/latest/install_and_upgrade/) with Curl

```shell
curl -sSL https://get.haskellstack.org/ | sh
```

or Wget:

```shell
wget -qO- https://get.haskellstack.org/ | sh
```

because the Stack packages are old (<2.0) and you'd need to install using `stack upgrade` anyway. The Homebrew and Chocolatey packages are up-to-date.

You do not need to install [GHC](https://www.haskell.org/ghc/), the Haskell compiler, or [Cabal](https://www.haskell.org/cabal/), Stack does that for us in the next step.

If Stack is working, which you can test with

```shell
stack --version
```

it's time to install all needed tools for the project. There are two scripts

- [./install_build_tools.bat](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/blob/main/install_build_tools.bat) on Windows
- [./install_build_tools.sh](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/HaskellTemplate/blob/main/install_build_tools.sh) on a unixish OS like Linux or Mac OS X

that do that for us. The scripts call the following commands:

```shell
pipenv install --dev
stack build --copy-compiler-tool hlint
stack build --copy-compiler-tool hoogle
stack build --copy-compiler-tool implicit-hie
stack build --copy-compiler-tool ghcid
stack build --copy-compiler-tool haskell-dap
stack build --copy-compiler-tool ghci-dap
stack build --copy-compiler-tool haskell-debug-adapter
stack build --copy-compiler-tool ormolu
stack build --copy-compiler-tool weeder
stack exec gen-hie > hie.yaml
```

so afterwards we can use [HLint](https://hackage.haskell.org/package/hlint-1.7/src/hlint.htm), [Hoogle](https://wiki.haskell.org/Hoogle), [gen-hie](https://github.com/Avi-D-coder/implicit-hie#readme), [GHCi](https://github.com/ndmitchell/ghcid#readme), [Debug Adapter](https://github.com/phoityne/haskell-debug-adapter/), [Ormolu](https://github.com/tweag/ormolu) and [Weeder](https://github.com/ocharles/weeder).

### Download

[This is for the project template, not the Stack template]
Download the latest release at GitHub: [Release at GitHub](https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/releases/latest)

{-# START_FILE hie.yaml ) #-}
cradle:
  stack:
    - path: "./src"
      component: "{{name}}:lib"

    - path: "./app/Main.hs"
      component: "{{name}}:exe:{{name}}-exe"

    - path: "./app/Paths_{{name}}.hs"
      component: "{{name}}:exe:{{name}}-exe"

    - path: "./src/Lib.hs"
      component: "{{name}}:exe:{{name}}-exe"

    - path: "./src/Paths_{{name}}.hs"
      component: "{{name}}:exe:{{name}}-exe"

    - path: "./test"
      component: "{{name}}:test:{{name}}-test"

{-# START_FILE install_build_tools.bat ) #-}
:: SPDX-License-Identifier: MIT
:: Copyright (C) 2021 Roland Csaszar
::
:: Project:  {{name}}
:: File:     build_tools.bat
:: Date:     21.05.2021
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
@echo off
:: Locally install mkdocs
pipenv install --dev

:: Locally build the needed Haskell tools.
stack build --copy-compiler-tool hlint
stack build --copy-compiler-tool hoogle
stack build --copy-compiler-tool implicit-hie
stack build --copy-compiler-tool ghcid
stack build --copy-compiler-tool haskell-dap
stack build --copy-compiler-tool ghci-dap
stack build --copy-compiler-tool haskell-debug-adapter
stack build --copy-compiler-tool hoogle
stack build --copy-compiler-tool ormolu
stack build --copy-compiler-tool weeder
:: stack build --copy-compiler-tool phoityne-vscode

echo Don't forget to add the directory that is mentioned in 'Copied executables to'
echo to your PATH or use 'stack exec TOOL'

stack exec gen-hie > hie.yaml

{-# START_FILE install_build_tools.sh ) #-}
#!/bin/bash
# SPDX-License-Identifier: MIT
# Copyright (C) 2021 Roland Csaszar
#
# Project:  {{name}}
# File:     install_build_tools.sh
# Date:     21.05.2021
###############################################################################

# Locally install mkdocs
pipenv install --dev

# Locally build the needed Haskell tools.
stack build --copy-compiler-tool hlint
stack build --copy-compiler-tool hoogle
stack build --copy-compiler-tool implicit-hie
stack build --copy-compiler-tool ghcid
stack build --copy-compiler-tool haskell-dap
stack build --copy-compiler-tool ghci-dap
stack build --copy-compiler-tool haskell-debug-adapter
stack build --copy-compiler-tool hoogle
stack build --copy-compiler-tool ormolu
stack build --copy-compiler-tool weeder
# stack build --copy-compiler-tool phoityne-vscode

echo "Don't forget to add the directory that is mentioned in 'Copied executables to'"
echo "to your PATH or use 'stack exec TOOL'"

stack exec gen-hie > hie.yaml

{-# START_FILE make_sh_executable.bat ) #-}
:: SPDX-License-Identifier: MIT
:: Copyright (C) 2021 Roland Csaszar
::
:: Project:  {{name}}
:: File:     make_sh_executable.bat
:: Date:     21.05.2021
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

:: Add the executable bit to '.sh' shell scripts, as this is a problem on
:: Windows filessystems.

"C:\Program Files\git\usr\bin\find"  ./ -name "*.sh" -exec git add --chmod=+x {} ;

{-# START_FILE make_sh_executable.sh ) #-}
#!/bin/bash
# SPDX-License-Identifier: MIT
# Copyright (C) 2021 Roland Csaszar
#
# Project:  HaskellTemplate
# File:     make_template_file.sh
# Date:     21.05.2021
###############################################################################


# Add the executable bit to '.sh' shell scripts, as the template engine
# doesn't set them.

find  ./ -name "*.sh" -exec git add --chmod=+x {} \;

{-# START_FILE make_template_file.sh ) #-}
#!/bin/bash
# SPDX-License-Identifier: MIT
# Copyright (C) 2021 Roland Csaszar
#
# Project:  HaskellTemplate
# File:     make_template_file.sh
# Date:     21.05.2021
###############################################################################

# Name of the template file to generate.
TEMPLATE_FILE="BigTemplate.hsfiles"

# Totally ignore this file.
IGNORE_ALL="make_template.sh"

# Strings to substitue with placeholders. ??_NAME gets substituted by ??_PH.
PROJECT_NAME="{{name}}"
PROJECT_PH="{{name}}"

GITUSER_NAME="{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}"
GITUSER_PH="{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}"

LICENSE_NAME="MIT"
LICENSE_PH="{{license-name}}{{^license-name}}YOUR_LICENSE{{/license-name}}"

AUTHOR_NAME="Roland Csaszar"
AUTHOR_PH="{{author-name}}{{^author-name}}Author name here{{/author-name}}"

EMAIL_NAME="rec\@gmx.at"
EMAIL_PH="{{author-email}}{{^author-email}}YOUR_EMAIL\@example.com{{/author-email}}"

COPYRIGHT_NAME="2021 Roland Csaszar"
COPYRIGHT_PH="{{copyright}}{{^copyright}}{{year}}{{^year}}$(date +\"%Y\"){{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}"


# All files under Git control, without everything in `docs/html`, the Github
# workflows, `stack.yaml`, all lockfiles and the template file itself.
FILE_LIST=$(git ls-files | grep -v "docs/html" | grep -v "stack.yaml" | grep -v ".lock" | grep -v ".hsfiles" | grep -v ".github/workflows/")

if [ -e "${TEMPLATE_FILE}" ]; then
    rm "${TEMPLATE_FILE}"
fi

for FILE_NAME in ${FILE_LIST}; do
    FILE_HEADER="{-# START_FILE ${FILE_NAME/${PROJECT_NAME}/${PROJECT_PH}} ) #-}"

    {
    echo "${FILE_HEADER}"

    if [ "${FILE_NAME}" == "${IGNORE_ALL}" ]; then
        cat "${FILE_NAME}"

    elif [ "$(echo "${FILE_NAME}" | grep -c ".*\.hs$" )" == "1" ]; then
        sed 's@'${PROJECT_NAME}'@'${PROJECT_PH}'@g;s@'${GITUSER_NAME}'@'"${GITUSER_PH}"'@g;s@'${EMAIL_NAME}'@'"${EMAIL_PH}"'@g' "${FILE_NAME}" \
        | sed 's@ Date:     [0-9]*\.\S*\.20[0-9][0-9]@ Date:     '"$(date +"%d.%m.%Y")"'@'

    elif [ "$(echo "${FILE_NAME}" | grep -c ".*\.sh$" )" == "1" ]; then
        sed 's@'${PROJECT_NAME}'@'${PROJECT_PH}'@g;s@'${GITUSER_NAME}'@'"${GITUSER_PH}"'@g;s@'${EMAIL_NAME}'@'"${EMAIL_PH}"'@g' "${FILE_NAME}" \
        | sed 's@ Date:     [0-9]*\.\S*\.20[0-9][0-9]@ Date:     '"$(date +"%d.%m.%Y")"'@'

    elif [ "$(echo "${FILE_NAME}" | grep -c ".*\.bat$" )" == "1" ]; then
        sed 's@'${PROJECT_NAME}'@'${PROJECT_PH}'@g;s@'${GITUSER_NAME}'@'"${GITUSER_PH}"'@g;s@'${EMAIL_NAME}'@'"${EMAIL_PH}"'@g' "${FILE_NAME}" \
        | sed 's@ Date:     [0-9]*\.\S*\.20[0-9][0-9]@ Date:     '"$(date +"%d.%m.%Y")"'@'

    elif [ "${FILE_NAME}" == "LICENSE" ]; then
        sed 's@'${PROJECT_NAME}'@'${PROJECT_PH}'@g;s@'"${COPYRIGHT_NAME}"'@'"${COPYRIGHT_PH}"'@g;s@'${GITUSER_NAME}'@'"${GITUSER_PH}"'@g;s@'"${AUTHOR_NAME}"'@'"${AUTHOR_PH}"'@g;s@'${EMAIL_NAME}'@'"${EMAIL_PH}"'@g' "${FILE_NAME}" \
        | sed 's@ Date:     [0-9]*\.\S*\.20[0-9][0-9]@ Date:     '"$(date +"%d.%m.%Y")"'@'

    else
        sed 's@'${PROJECT_NAME}'@'${PROJECT_PH}'@g;s@'"${COPYRIGHT_NAME}"'@'"${COPYRIGHT_PH}"'@g;s@'${GITUSER_NAME}'@'"${GITUSER_PH}"'@g;s@'"${AUTHOR_NAME}"'@'"${AUTHOR_PH}"'@g;s@'${EMAIL_NAME}'@'"${EMAIL_PH}"'@g;s@'"${LICENSE_NAME}"'@'"${LICENSE_PH}"'@g' "${FILE_NAME}" \
        | sed 's@ Date:     [0-9]*\.\S*\.20[0-9][0-9]@ Date:     '"$(date +"%d.%m.%Y")"'@'
    fi
    echo ""
    } >> "${TEMPLATE_FILE}"

done

{-# START_FILE mkdocs.yml ) #-}
# SPDX-License-Identifier: {{license-name}}{{^license-name}}YOUR_LICENSE{{/license-name}}
# Copyright (C) {{copyright}}{{^copyright}}{{year}}{{^year}}"2021"{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}
#
# Project:  {{name}}
# File:     mkdocs.yml
# Date:     21.05.2021
###############################################################################

site_name: {{name}}

site_url: https://readthedocs.org/projects/{{name}}/
#repo_url: https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}
#repo_name: GitHub
#copyright: (C) {{copyright}}{{^copyright}}{{year}}{{^year}}"2021"{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}

docs_dir: docs
site_dir: site

nav:
  - Home: index.md
  - Project Links:
      - "Downloads": https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/releases/latest
      - "GitHub Project Page": "https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}"
      - "Report a Bug or a Feature Request": "https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/issues/new/choose"
      - "Issue Tracker at GitHub": "https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}/issues"
  - "Installation & Usage":
      - "Installation & Usage": usage.md
      - "License": license.md
  - Contributing:
      - Contributing: contributing.md
  - "API Documentation":
      - "Library Reference": html/index.html

theme:
  name: readthedocs
  prev_next_buttons_location: both
  navigation_depth: 8
  collapse_navigation: False
  style_nav_header_background: "#5DB1DE"

extra_javascript:
  - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML

markdown_extensions:
  - markdown.extensions.fenced_code
  - markdown.extensions.meta
  - markdown.extensions.smarty
  - markdown.extensions.admonition
  - markdown.extensions.def_list
  - markdown.extensions.attr_list
  - markdown.extensions.abbr
  - markdown.extensions.footnotes
  - markdown.extensions.codehilite:
      guess_lang: False
      noclasses: True
      pygments_style: emacs
  - markdown.extensions.tables
  - markdown.extensions.nl2br
  - markdown.extensions.sane_lists
  - markdown.extensions.toc:
      permalink: True
  - mdx_math

plugins:
  - search

{-# START_FILE package.yaml ) #-}
# SPDX-License-Identifier: {{license-name}}{{^license-name}}YOUR_LICENSE{{/license-name}}
# Copyright (C) {{copyright}}{{^copyright}}{{year}}{{^year}}"2021"{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}
#
# Project:  {{name}}
# File:     package.yaml
# Date:     21.05.2021
###############################################################################
name: {{name}}
version: 0.1.0.0
github: "{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}"
license: {{license-name}}{{^license-name}}YOUR_LICENSE{{/license-name}}
author: "{{author-name}}{{^author-name}}Author name here{{/author-name}}"
maintainer: "{{author-email}}{{^author-email}}YOUR_EMAIL@example.com{{/author-email}}"
copyright: "{{copyright}}{{^copyright}}{{year}}{{^year}}"2021"{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}"

extra-source-files:
  - README.md
  - CHANGELOG.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            Web

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description: Please see the README on GitHub at <https://github.com/{{github-username}}{{^github-username}}GITHUB_USER_NAME{{/github-username}}/{{name}}/{{name}}#readme>

dependencies:
  - base >= 4.7 && < 5

library:
  source-dirs:
    - src

ghc-options:
  - -haddock
  - -Wall
  - -Wcompat
  - -fwarn-redundant-constraints
  - -fwarn-tabs
  - -fwarn-unused-imports
  - -fwarn-missing-signatures
  - -fwarn-name-shadowing
  - -fwarn-incomplete-patterns
  - -fwarn-incomplete-uni-patterns
  - -fwarn-overlapping-patterns
  - -fwarn-incomplete-record-updates
  - -fwarn-monomorphism-restriction
  - -fwarn-orphans

default-extensions:
  - EmptyCase
  - FlexibleContexts
  - FlexibleInstances
  - InstanceSigs
  - MultiParamTypeClasses
  - LambdaCase
  - MultiWayIf
  - NamedFieldPuns
  - TupleSections
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveLift
  - DeriveTraversable
  - DerivingStrategies
  - GeneralizedNewtypeDeriving
  - StandaloneDeriving
  - BangPatterns
  - KindSignatures
  - TypeOperators
  - OverloadedStrings
  - ScopedTypeVariables
  - TypeApplications
  - ConstraintKinds
  - RankNTypes

executables:
  {{name}}-exe:
    main: Main.hs
    source-dirs:
      - app
    #      - src
    ghc-options:
      - -threaded
      - -rtsopts
      - -with-rtsopts=-N
    dependencies:
      - {{name}}
      - cmdargs

tests:
  {{name}}-test:
    main: Spec.hs
    source-dirs:
      - test
    #   - src
    ghc-options:
      - -threaded
      - -rtsopts
      - -with-rtsopts=-N
    dependencies:
      - {{name}}
      - hspec
      - hspec-contrib
      - hspec-smallcheck
      - hspec-hedgehog
      - hspec-leancheck
      - hspec-golden
      - hspec-tables
      - QuickCheck
      - hspec-expectations-pretty-diff
      - hpc-codecov
      - hpc-lcov

{-# START_FILE run_code.bat ) #-}
:: SPDX-License-Identifier: MIT
:: Copyright (C) 2021 Roland Csaszar
::
:: Project:  {{name}}
:: File:     run_code.bat
:: Date:     21.05.2021
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

:: Run VS Code or Code Insiders

cd %~dp0
echo %cd%

:: Code:
:: stack exec "C:\Users\RC\AppData\Local\Programs\Microsoft VS Code\bin\code"

:: Code Insiders:
stack exec "%LOCALAPPDATA%\Programs\Microsoft VS Code Insiders\bin\code-insiders" {{name}}.code-workspace

{-# START_FILE run_code.sh ) #-}
#!/bin/bash
# SPDX-License-Identifier: MIT
# Copyright (C) 2021 Roland Csaszar
#
# Project:  {{name}}
# File:     run_code.sh
# Date:     21.05.2021
###############################################################################
# Run VS Code or Code Insiders

# Code:
# stack exec code

# Code Insiders:
stack exec code-insiders {{name}}.code-workspace

{-# START_FILE run_codecov_coverage.bat ) #-}
:: SPDX-License-Identifier: MIT
:: Copyright (C) 2021 Roland Csaszar
::
:: Project:  {{name}}
:: File:     run_coverage.bat
:: Date:     21.05.2021
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

@echo off

for /f "delims=" %%l in ('stack path --local-hpc-root') do (
    set RESULT=%%l
    call :TRIM RESULT
)

for /f "delims=" %%l in ('stack path --dist-dir') do (
    set MIX_DIR=%%l
    call :TRIM MIX_DIR
)

@echo on
stack clean
stack test --coverage
stack exec -- hpc-codecov --verbose -o coverage.json %RESULT%\{{name}}\{{name}}-test\{{name}}-test.tix -m %MIX_DIR%\hpc

@echo off
GOTO :EOF

:: trim spaces off the strings
:TRIM
SetLocal EnableDelayedExpansion
Call :TRIMHELPER %%%1%%
EndLocal & set %1=%helper_tmp%
GOTO :EOF

:TRIMHELPER
set helper_tmp=%*
GOTO :EOF

{-# START_FILE run_codecov_coverage.sh ) #-}
#!/bin/bash
# SPDX-License-Identifier: MIT
# Copyright (C) 2021 Roland Csaszar
#
# Project:  {{name}}
# File:     run_codecov_coverage.sh
# Date:     21.05.2021
###############################################################################

HPC_ROOT_DIR=$(stack path --local-hpc-root)
TIX_PATH=$(find "${HPC_ROOT_DIR}"/{{name}} -name "*.tix")
MIX_DIR=$(stack path --dist-dir)

stack clean
stack test --coverage
stack exec -- hpc-codecov --verbose -o coverage.json "${TIX_PATH}" -m "${MIX_DIR}/hpc"

{-# START_FILE run_coverage.bat ) #-}
:: SPDX-License-Identifier: MIT
:: Copyright (C) 2021 Roland Csaszar
::
:: Project:  {{name}}
:: File:     run_coverage.bat
:: Date:     21.05.2021
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

@echo off

for /f "delims=" %%l in ('stack path --local-hpc-root') do (
    set RESULT=%%l
    call :TRIM RESULT
)

@echo on
stack clean
stack test --coverage
stack exec -- hpc-lcov --file %RESULT%\{{name}}\{{name}}-test\{{name}}-test.tix

@echo off
GOTO :EOF

:: trim spaces off the strings
:TRIM
SetLocal EnableDelayedExpansion
Call :TRIMHELPER %%%1%%
EndLocal & set %1=%helper_tmp%
GOTO :EOF

:TRIMHELPER
set helper_tmp=%*
GOTO :EOF

{-# START_FILE run_coverage.sh ) #-}
#!/bin/bash
# SPDX-License-Identifier: MIT
# Copyright (C) 2021 Roland Csaszar
#
# Project:  {{name}}
# File:     run_coverage.sh
# Date:     21.05.2021
###############################################################################

HPC_ROOT_DIR=$(stack path --local-hpc-root)
TIX_PATH=$(find "${HPC_ROOT_DIR}"/{{name}} -name "*.tix")

stack clean
stack test --coverage
stack exec -- hpc-lcov --file "${TIX_PATH}"

{-# START_FILE run_haddock.bat ) #-}
:: SPDX-License-Identifier: MIT
:: Copyright (C) 2021 Roland Csaszar
::
:: Project:  {{name}}
:: File:     run_haddock.bat
:: Date:     21.05.2021
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

:: Run Haddock to generate the library's reference dcumentation to doc/html.
stack clean
stack haddock --haddock-arguments="--odir=docs/html --html --built-in-themes"

{-# START_FILE run_haddock.sh ) #-}
#!/bin/bash
# SPDX-License-Identifier: MIT
# Copyright (C) 2021 Roland Csaszar
#
# Project:  {{name}}
# File:     run_haddock.sh
# Date:     21.05.2021
###############################################################################

# Run Haddock to generate the library's reference dcumentation to doc/html.
stack clean
stack haddock --haddock-arguments="--odir=docs/html --html --built-in-themes"

{-# START_FILE run_hoogle.bat ) #-}
:: SPDX-License-Identifier: MIT
:: Copyright (C) 2021 Roland Csaszar
::
:: Project:  {{name}}
:: File:     run_hoogle.bat
:: Date:     21.05.2021
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

:: indexes the project's dependencies and displays the search.

stack hoogle -- generate --local
stack hoogle -- server --local --port=8080

{-# START_FILE run_hoogle.sh ) #-}
#!/bin/bash
# SPDX-License-Identifier: MIT
# Copyright (C) 2021 Roland Csaszar
#
# Project:  {{name}}
# File:     run_hoogle.sh
# Date:     21.05.2021
###############################################################################

# indexes the project's dependencies and displays the search.

stack hoogle -- generate --local
stack hoogle -- server --local --port=8080

{-# START_FILE run_watch.bat ) #-}
:: SPDX-License-Identifier: MIT
:: Copyright (C) 2021 Roland Csaszar
::
:: Project:  {{name}}
:: File:     run_watch.bat
:: Date:     21.05.2021
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

:: Watches for file changes to rebuild and rerun the tests.
stack test --fast --haddock-deps --file-watch

{-# START_FILE run_watch.sh ) #-}
#!/bin/bash
# SPDX-License-Identifier: MIT
# Copyright (C) 2021 Roland Csaszar
#
# Project:  {{name}}
# File:     run_watch.sh
# Date:     21.05.2021
###############################################################################
# Watches for file changes to rebuild and rerun the tests.
stack test --fast --haddock-deps --file-watch

{-# START_FILE scripts/get_changelog.sh ) #-}
#!/bin/bash
# SPDX-License-Identifier: MIT
# Copyright (C) 2021 Roland Csaszar
#
# Project:  {{name}}
# File:     get_changelog.sh
# Date:     21.05.2021
###############################################################################
# Returns the newest part of the changelog `CHANGELOG.md`.
# For use with automatic releases.

# Path to the changelog to parse
CHANGELOG_PATH="../CHANGELOG.md"


LINE_NUMS=$(grep '##' ${CHANGELOG_PATH} -n| head -2|cut -f1 -d":"|paste -s -d' ')

LINE_NUM_ARRAY=(${LINE_NUMS})

if [ "${#LINE_NUM_ARRAY[@]}" -lt "1" ]
then
    echo ""
elif [ "${#LINE_NUM_ARRAY[@]}" -lt "2" ]
then
    tail +${LINE_NUM_ARRAY[0]} ${CHANGELOG_PATH}
else
    head -$((${LINE_NUM_ARRAY[1]} - 1)) ${CHANGELOG_PATH} | tail +${LINE_NUM_ARRAY[0]}
fi

{-# START_FILE src/Lib.hs ) #-}
-- SPDX-License-Identifier: MIT
-- Copyright (C) 2021 Roland Csaszar
--
-- Project:  {{name}}
-- File:     Lib.hs
-- Date:     21.05.2021
--
--------------------------------------------------------------------------------

module Lib (fibN, fibBetter, fibZip, goldenRatio) where

-- | Calculate a list of Fibonacci numbers of length `len`.
fibN :: (Num a, Enum a, Ord a) => a -> [a]
fibN len
  | len < 1 = []
  | len == 1 = [1]
  | otherwise = [fibNaive x | x <- [0 .. len - 1]]

-- | Correct, but slow implementation.
fibNaive :: (Eq a, Num a, Num p) => a -> p
fibNaive 0 = 1
fibNaive 1 = 1
fibNaive len = fibNaive (len - 1) + fibNaive (len - 2)

-- | Better version, recursively construct a list.
fibBetter :: Integer -> [Integer]
fibBetter len
  | len < 1 = []
  | len == 1 = [1]
  | otherwise = fibHelper [] len
  where
    fibHelper :: [Integer] -> Integer -> [Integer]
    fibHelper list 0 = list
    fibHelper list n =
      case drop (length list - 2) list of
        [x, y] -> fibHelper (list ++ [x + y]) (n - 1)
        [] -> fibHelper [1] (n - 1)
        [1] -> fibHelper [1, 1] (n - 1)
        _ -> []

-- | Short version, using zip with the same list twice.
fibZip :: Int -> [Integer]
fibZip len = take len fibZips
  where
    fibZips :: [Integer]
    fibZips = 1 : 1 : zipWith (+) fibZips (tail fibZips)

-- | Calculate the golden ratio.
goldenRatio :: Int -> Double
goldenRatio numDig = goldenHelper numDig 3
  where
    fibs = fibZip (maxBound :: Int)
    goldenHelper :: Int -> Int -> Double
    goldenHelper numdig l =
      case reverse $ take l fibs of
        [] -> 0.0
        [_] -> 1.0
        [_, _] -> 1.0
        x : y : z : _ ->
          if abs (curr - before) < epsilon
            then curr
            else goldenHelper numdig (l + 1)
          where
            curr :: Double = fromInteger x / fromInteger y
            before :: Double = fromInteger y / fromInteger z
            epsilon = 10.0 ** (- fromIntegral numdig :: Double)

{-# START_FILE test/FibonacciSpec.hs ) #-}
-- SPDX-License-Identifier: MIT
-- Copyright (C) 2021 Roland Csaszar
--
-- Project:  {{name}}
-- File:     FibonacciSpec.hs
-- Date:     21.05.2021
--
--------------------------------------------------------------------------------

-- | This tests should be automatically discovered by HSpec.
module FibonacciSpec (spec) where

import Lib (fibBetter, fibN, fibZip)
import qualified Test.Hspec as HS
import qualified Test.Hspec.Expectations.Pretty as P
import qualified Test.Hspec.Hedgehog as HH
import qualified Test.Hspec.LeanCheck as LC
import qualified Test.Hspec.SmallCheck as SC
import qualified Test.Hspec.Tables as T
import qualified Test.QuickCheck as QC

-- | Test the generation of a list with Fibonacci numbers.
spec :: HS.Spec
spec = do
  HS.describe "Fibonacci" $ do
    HS.it "Must throw exception: not a Fibonacci series!" $
      checkFibonacci [1 .. 100] `HS.shouldThrow` HS.anyException

    T.byExample
      ("Length", "Naive Fibonacci list")
      [ (0, []),
        (1, [1]),
        (2, [1, 1]),
        (3, [1, 1, 2]),
        (4, [1, 1, 2, 3])
      ]
      (\(n :: Integer) result -> fibN n `P.shouldBe` result)

    T.byExample
      ("Length", "Better Fibonacci list")
      [ (0, []),
        (1, [1]),
        (2, [1, 1]),
        (3, [1, 1, 2]),
        (4, [1, 1, 2, 3])
      ]
      (\(n :: Integer) result -> fibBetter n `P.shouldBe` result)

    T.byExample
      ("Length", "Zip Fibonacci list")
      [ (0, []),
        (1, [1]),
        (2, [1, 1]),
        (3, [1, 1, 2]),
        (4, [1, 1, 2, 3])
      ]
      (\(n :: Int) result -> fibZip n `P.shouldBe` result)

    HS.it "Naive version: Check if an+1 = an + an-1, n < 37" $
      checkFibonacci $ fibN 38

    HS.it "Better version: Check if an+1 = an + an-1, n < 1000 " $
      checkFibonacci $ fibBetter 1000

    HS.it "Zip version: Check if an+1 = an + an-1, n < 1000 " $
      checkFibonacci $ fibZip 1000

    HS.it "Better version: Check using QuickCheck" $
      QC.property $
        \n -> do
          print n
          checkFibonacci $ fibBetter n

    HS.it "Better version: Check using SmallCheck" $
      SC.property $
        \n -> do
          print n
          checkFibonacci $ fibBetter n

    HS.it "Zip version: Check using SmallCheck" $
      SC.property $
        \n -> do
          print n
          checkFibonacci $ fibZip n

    HS.it "Zip version: Check using LeanCheck" $
      LC.property $
        \n -> do
          print n
          checkFibonacci $ fibZip n

-- | Test, if for the given list `an+1 = an + an-1` holds for all elements.
checkFibonacci :: [Integer] -> P.Expectation
checkFibonacci list =
  case list of
    [] -> list `P.shouldBe` []
    [_] -> list `P.shouldBe` [1 :: Integer]
    [_, _] -> True `P.shouldBe` True
    x : y : z : xs
      | z == x + y -> checkFibonacci (y : z : xs)
      | otherwise -> x + y `P.shouldBe` z

{-# START_FILE test/GoldenRatioSpec.hs ) #-}
-- SPDX-License-Identifier: MIT
-- Copyright (C) 2021 Roland Csaszar
--
-- Project:  {{name}}
-- File:     GoldenRatioSpec.hs
-- Date:     21.05.2021
--
--------------------------------------------------------------------------------

-- | Tests in this module should be automatically discovered by HSpec.
module GoldenRatioSpec (spec) where

import Lib (goldenRatio)
import qualified Test.Hspec as HS
import qualified Test.Hspec.Expectations.Pretty as P
import qualified Test.Hspec.Hedgehog as HH
import qualified Test.Hspec.LeanCheck as LC
import qualified Test.Hspec.SmallCheck as SC
import qualified Test.Hspec.Tables as T
import qualified Test.QuickCheck as QC

-- | Golden ratio is \( \frac{1 + \sqrt{5}}{2} \).
goldenRatioConst :: Double
goldenRatioConst = (1.0 + sqrt 5) / 2.0

-- | Define an epsilon with a given number of fractional digits of precision.
-- 15 is the biggest number that makes sense for the golden ratio.
epsilon :: Double -> Double
epsilon f = 10.0 ** (- f)

-- | Test the iterative calculation of the golden ratio using Fibonacci numbers
--  actually works ;).
spec :: HS.Spec
spec = do
  HS.describe "Golden Ratio" $ do
    HS.it "QuickCheck: get biggest epsilon that fails" $
      QC.property $
        \f -> abs (goldenRatioConst - goldenRatio 10) `P.shouldSatisfy` (< epsilon f)

    HS.it "SmallCheck: get biggest epsilon that fails" $
      SC.property $
        \f -> abs (goldenRatioConst - goldenRatio 10) `P.shouldSatisfy` (< epsilon f)

    HS.it "LeanCheck: get biggest epsilon that fails" $
      LC.property $
        \f -> abs (goldenRatioConst - goldenRatio 10) `P.shouldSatisfy` (< epsilon f)

    HS.it "Compare golden ratio against constant, 8 digits." $
      HS.example $ abs (goldenRatioConst - goldenRatio 8) `P.shouldSatisfy` (< epsilon 8.0)

    T.byExample
      ("Number of fractional digits", "Actual number of fra. digits")
      [ (3 :: Int, 3 :: Int),
        (4, 4),
        (5, 5),
        (6, 6),
        (7, 7),
        (8, 8),
        (9, 9),
        (10, 10),
        (11, 11),
        (12, 12),
        (13, 13),
        (14, 14),
        (15, 15)
      ]
      (\e f -> abs (goldenRatioConst - goldenRatio e) `P.shouldSatisfy` (< epsilon (fromIntegral f)))

{-# START_FILE test/Spec.hs ) #-}
-- SPDX-License-Identifier: MIT
-- Copyright (C) 2021 Roland Csaszar
--
-- Project:  {{name}}
-- File:     Spec.hs
-- Date:     21.05.2021
--
--------------------------------------------------------------------------------
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}

-- Automagically discover tests (test `Spec`s).

